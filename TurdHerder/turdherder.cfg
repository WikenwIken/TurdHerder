# Include servo hardware definition separately to allow for automatic upgrade
[include turd_hw.cfg]

##########################################################################################

# Sample config to be used in conjunction with TURDHERDER.  Created by NightWiken 
# (NightWiken on Discord). The macro is a modified version of Blobifier for AFC by 
# ImSundee.

# IMPORTANT: It is very important to modify your printer.cfg by commenting out the 
# [safe_z_homing] section and replacing it with the [force_move] and [homing_override] 
# sections located printurd.cfg

# The TURDHERDER uses some room at the back-left side of your printer, depending on your
# printer limits and positions. (usually max_pos.y - toolhead_y and brush_start + 
# brush_width + toolhead_x). If you do place objects within this region, TURDHERDER will
# skip purging automatically. It does this by extending the EXCLUDE_OBJECT_* macro's, so
# make sure you have exclude objects enabled in your slicer.

###################################### DISCLAIMER ########################################

# You, and you alone, are responsible for the correct execution of these macros and 
# gcodes. Any damage that may occur to your machine remains your responsibility. 
# Especially when executing this macro for the first few times, keep an eye on your 
# printer and the emergency stop.

# Notes on parameters:
# PURGE_LENGTH=[float] (optional) The length to purge. If ommited (default) it will check
#                      the purge_volumes matrix or variable_purge_length. This can be used
#                      to override and for testing.

[gcode_macro TURDHERDER]
# These parameters define your filament purging.
# Note that the control of retraction is set in 'mmu_macro_vars.cfg' which can be increased
# if you experience excessive oozing.
variable_purge_spd: 480                 # Speed, in mm/min, of the purge.
variable_purge_temp_min: 200            # Minimum nozzle purge temperature.
variable_toolhead_x: 70                 # From the nozzle to the left of your toolhead
variable_toolhead_y: 50                 # From the nozzle to the front of your toolhead

variable_retract_before_park:    3.0     # amount in mm. 0 to disable
variable_retract_speed:       2000       # mm/m
variable_retracted_length:  0.4	# Amount of current retraction

# This macro will prevent a gcode movement downward while 'blobbing' if there might be a
# print in the way (e.g. You print something large and need the area where TURDHERDER does
# its... 'business'). However, at low heights (or at print start) this might not be
# desireable. You can force a 'safe descend' with this variable. Keep in mind that the 
# height of the print is an estimation based on previous heights and certain assumptions
# so it might be wise to include a safety margin of 0.2mm
variable_force_safe_descend_height_until: 1.0 

# Adjust this so that your build plate is just lower than the bottom of the Turd Herder.  
# It is recommended to leave at least 2 mm of space.
# This will also be the maximum Z height that requires a Z move during the purge sequence.
variable_thbottom: 23

# These parameters define your scrubbing, travel speeds, safe z clearance and how many
# times you want to wipe. Update as necessary.
variable_wipe_qty:              4          # Number of complete (A complete wipe: left,
                                           #   right, left OR right, left, right) wipes.
variable_travel_spd_xy:      25000          # Travel (not cleaning) speed along x and
                                           #   y-axis in mm/min.
variable_travel_spd_z:       2000          # Travel (not cleaning) speed along z axis
                                           #   in mm/min.
variable_wipe_spd_xy: 30000          # Nozzle wipe speed in mm/min.

# The acceleration to use when using the brush action. If set to 0, it uses the already 
# set acceleration. However, in some cases this is not desirable for the last motion 
# could be an 'outer contour' acceleration which is usually lower.
variable_brush_accel: 10000

# TURDHERDER sends the toolhead to the maximum y position during purge oeprations and
# minimum x position during shake operations. This can cause issues when skew correction 
# is set up. If you have skew correction enabled and get 'move out of range' errors 
# regarding TURDHERDER while skew is enabled, try increasing this value. Keep the 
# adjustments small though! (0.1mm - 0.5mm) and increase it until it works.

variable_skew_correction: 0.1

# These parameters define the size of the brush. Update as necessary. A visual reference
# is provided below.
#
#                     ←   brush_width   →
#                      _________________
#                     |                 |  ↑                Y position is acquired from your
#  brush_start (x, y) |                 | brush_depth       stepper_y position_max. Adjust
#                     |_________________|  ↓                your brush physically in Y so
#                                                           that the nozzle scrubs within the
#                                                           brush.
# __________________________________________________________
#                        PRINTER FRONT


# Set the start location of the brush. Extend the Turd Herder using the SERVO_OUT command.
# Position the print nozzle at the left side of the brush and input the X and Y coordinates below.
variable_brush_start_x:           74.0  
variable_brush_start_y:           295.0

# width of the brush
variable_brush_width: 35

# Set location of where to purge. Extend the Turd Herder using the SERVO_OUT command.
# Position the print nozzle at the center of the "bowl" and input the X and Y coordinates below.
variable_purge_x: 61.0
variable_purge_y: 300.0

# Servo angles for tray positions
variable_tray_angle_out: 180
variable_tray_angle_mid: 90
variable_tray_angle_in: 0

# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

##########################################################################################
# The following comment block about purge variables is left in from the original Blobifier
# code in the hopes that someone more intelligent than I might be able to optimize the 
# purge without the assist of the Z move. -NightWiken
##########################################################################################

# The following section defines how the purging sequence is executed. This is where you 
# tune the purging to create pretty blobs. Refer to the visual reference for a better 
# understanding. The visual is populated with example values. Below are some guides 
# provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Decr. z_raise_exp          |
# |                                     | Decr. z_raise              |
# |                                     | Incr. purge_length_maximum |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. z_raise_exp          |
# |         later iterations            |     (Not above 1)          |
# +-------------------------------------+----------------------------+
#

# The height to raise the nozzle above the tray before purging. This allows any built up 
# pressure to escape before the purge.
variable_purge_start: 0.2

# The amount to raise Z
variable_z_raise: 10

# As the nozzle gets higher and the blob wider, the Z raise needs to be reduced, this
# follows the following formula: 
#            (extruded_amount/max_purge_length)^z_raise_exp * z_raise
# 1 is linear, below 1 will cause z to raise less quickly over time, above 1 will make it
# raise quicker over time. 0.85 is a good starting point and you should not have it above 1
variable_z_raise_exp: 0.85

# Lift the nozzle slightly after creating the blob te release pressure on the tray.
variable_eject_hop: 1.0

# Dwell time (ms) after purging and before cleaning to relieve pressure from the nozzle.
variable_pressure_release_time: 1000

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together. Values range 
# from 0 .. 1, or -1 if you don't want it changed.
#variable_part_cooling_fan: -1              # Leave it unchanged
#variable_part_cooling_fan:  0              # Disable the fan
#variable_part_cooling_fan:  1              # Run it at full speed
variable_part_cooling_fan: 0.7              # Custom value

# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum: 35

# The maximum amount of filament (in mm¹) to purge in a single blob. TURDHERDER will 
# automatically purge multiple blobs if the purge amount exeeds this.
variable_purge_length_maximum: 120

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length: 80

# The slicer values often are a bit too wastefull. Tune it here to get optimal values. 
# 0.6 (60%) is a good starting point.
variable_purge_length_modifier: 0.6

# Fixed length of filament to add after the purge volume calculation. Happy Hare already
# shares info on the extra amount of filament to purge based on known residual filament,
# tip cutting fragment and initial retraction setting. However this setting can add a fixed
# amount on top on that if necessary although it is recommended to start with 0 and tune
# slicer purge matrix first.
# When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition: 30

gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=TURDHERDER_state
  
  # ======================================================================================
  # ==================== CHECK HOMING STATUS =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="TURDHERDER: Not homed! Home xyz before blobbing"
  {% else %}
    
    # Part cooling fan
    {% if part_cooling_fan >= 0 %}
      # Save the part cooling fan speed to be enabled again later
      {% set backup_fan_speed = printer.fan.speed %}
      # Set part cooling fan speed
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # Set feedrate to 100% for correct speed purging
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100
    
    TURDHERDER_SERVO POS=mid
        
    # ======================================================================================
    # ==================== DEFINE BASIC VARIABLES ==========================================
    # ======================================================================================
    
    {% set park_vars = printer['gcode_macro AFC_PARK'] %}
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set bl_count = printer['gcode_macro _TURDHERDER_COUNT'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set safe = printer['gcode_macro _TURDHERDER_SAFE_DESCEND'] %}
    {% set ignore_safe = safe.print_height < force_safe_descend_height_until %}
    {% set restore_z = [printer['gcode_macro TURDHERDER_PARK'].restore_z,pos.z]|max %}
    {% set pos_max = printer.toolhead.axis_maximum %}
    {% set position_y = pos_max.y - skew_correction %}

    {% set bs = printer['gcode_macro TURDHERDER_SERVO'] %}
    
    {% set bl = printer['gcode_macro TURDHERDER'] %}

    # Get purge volumes from the slicer (if set up right. see 
    # https://github.com/moggieuk/Happy-Hare/wiki/Gcode-Preprocessing)
    #   {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}


    # ======================================================================================
    # ==================== DETERMINE PURGE LENGTH ==========================================
    # ======================================================================================

    {% if params.PURGE_LENGTH %} # =============== PARAM PURGE LENGTH ======================
      {action_respond_info("TURDHERDER: param PURGE_LENGTH provided")}
      {% set purge_len = params.PURGE_LENGTH|float %}


    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("TURDHERDER: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float + bl.retracted_length %}
    {% endif %}

    # # ==================================== APPLY PURGE MINIMUM =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max|round(0, 'ceil')|int %}
    {action_respond_info("TURDHERDER: Purging %dmm of filament" % (purge_len))}

    {% if params.PURGE_LENGTH %}
        {% set purge_len = params.PURGE_LENGTH|float %}
      {% else %} 
        {% set purge_len = purge_length %}
      {% endif %}
    
    # Apply purge minimum
    {% set purge_len = [purge_len,purge_length_minimum]|max|round(0, 'ceil')|int %}
    {action_respond_info("TURDHERDER: Purging %dmm of filament" % (purge_len))}
    
    # ======================================================================================
    # ==================== PURGING SEQUENCE ================================================
    # ======================================================================================

    # Set to absolute positioning.
    G90

    # Check for purge length and purge if necessary.
    {% if purge_len|float > 0 %}

      # ====================================================================================
      # ==================== POSITIONING ON TRAY ===========================================
      # ====================================================================================

      {% if safe.tray or ignore_safe %}
        {% if pos.z < thbottom %}
          G1 Z{thbottom} F{travel_spd_z}
        {% endif %}    
        TURDHERDER_SERVO POS=out
      {% endif %}

      # ====================================================================================
      # ==================== POSITIONING ===================================================
      # ====================================================================================
     
      # Move over to the tray
      G1 X{purge_x} Y{purge_y} F{travel_spd_xy}

      # ====================================================================================
      # ==================== HEAT HOTEND ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== START ITERATING ===============================================
      # ====================================================================================
      
      # Calculate total number of iterations based on the purge length and the max_iteration 
      # length.
      {% set blobs = (purge_len / purge_length_maximum)|round(0, 'ceil')|int %}
      {% set purge_per_blob = purge_len|float / blobs %}
      {% set retracts_per_blob = (purge_per_blob / 40)|round(0, 'ceil')|int %}
      {% set purge_per_retract = (purge_per_blob / retracts_per_blob)|int %}
      {% set pulses_per_retract = (purge_per_blob / retracts_per_blob / 5)|round(0, 'ceil')|int %}
      {% set pulses_per_blob = (purge_per_blob / 5)|round(0, 'ceil')|int %}
      {% set purge_per_pulse = purge_per_blob / pulses_per_blob %}
      {% set pulse_time_constant = purge_per_pulse * 0.95 / purge_spd / (purge_per_pulse * 0.95 / purge_spd + purge_per_pulse * 0.05 / 50) %}
      {% set pulse_duration = purge_per_pulse / purge_spd %}

      # Repeat the process until purge_len is reached
      {% for blob in range(blobs) %}
        RESPOND MSG={"'TURDHERDER: Blob %d of %d (%.1fmm)'" % (blob + 1, blobs, purge_per_blob)}

        # relative positioning
        G91 
        # relative extrusion
        M83
        
        # Purge filament in a pulsating motion to purge the filament quicker and better
        {% for pulse in range(pulses_per_blob) %}
          # Calculations to determine z-speed
          {% set purged_this_blob = pulse * purge_per_pulse %}
          {% set z_last_pos = purge_start + ((purged_this_blob)/purge_length_maximum)**z_raise_exp * z_raise %}
          {% set z_pos = purge_start + ((purged_this_blob + purge_per_pulse)/purge_length_maximum)**z_raise_exp * z_raise %}
          {% set z_up = z_pos - z_last_pos %}
          {% set speed = z_up / pulse_duration %}

          # Purge quickly.  (The 7.4 constant in the feedrate was calculated by me to try and compensate for the lack
          # of a Z move.  I don't remember how I got there but I will make it a variable once I figure it back out.)
          G1 E{purge_per_pulse * 0.95} F{speed * 7.4}  
          
          # Purge a tiny bit slowly
          G1 E{purge_per_pulse * 0.05} F{speed * 7.4}

          # retract and unretract filament every now and then for thourough cleaning
          {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
            G1 E-2 F1800
            G1 E2 F800
          {% endif %}
          
        {% endfor %}

        # Retract to match what Happy Hare is expecting
        G1 E-{bl.retracted_length} F{bl.retract_speed * 60}

    {% if safe.brush or ignore_safe %}
      TURDHERDER_CLEAN
    {% else %}
      RESPOND MSG="Try again"
      G1 X{purge_x} Y{purge_y} F{travel_spd_xy}
    {% endif %}
        
        # ==================================================================================
        # ==================== DEPOSIT BLOB ================================================
        # ==================================================================================
        {% if safe.tray or ignore_safe %}
          # Double tap the drain to increase the odds of the turd flushing
          TURDHERDER_SERVO POS=in
          TURDHERDER_SERVO POS=mid
          TURDHERDER_SERVO POS=in          
          TURDHERDER_SERVO POS=mid
        {% endif %}
      {% endfor %}
    {% endif %}

    # ======================================================================================
    # ==================== RESTORE STATE ===================================================
    # ======================================================================================
    G90 # absolute positioning    
    G1 Z{restore_z} F{travel_spd_z}
    
    {% if part_cooling_fan >= 0 %}
      # Reset part cooling fan if it was changed
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=TURDHERDER_state 


##########################################################################################
# Wipes the nozzle on the brass brush
#
[gcode_macro TURDHERDER_CLEAN]
gcode:
  {% set bb = printer['gcode_macro TURDHERDER'] %}
  {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set original_accel = printer.toolhead.max_accel %}
  {% set original_minimum_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
  {% set pos = printer.gcode_move.gcode_position %}

  SAVE_GCODE_STATE NAME=TURDHERDER_CLEAN_state

  G90 # absolute positioning
  
  {% if bb.brush_accel > 0 %}
    SET_VELOCITY_LIMIT ACCEL={bb.brush_accel} MINIMUM_CRUISE_RATIO=0.1
  {% endif %}
  # Check if Z is greater than the bottom of the base and move up if not
  {% if pos.z < bb.thbottom %}
    G1 Z{bb.thbottom} F{bb.travel_spd_z}
  {% endif %}
  # Extend the chimney.
  TURDHERDER_SERVO POS=out
  
  G1 X{bb.brush_start_x} F{bb.travel_spd_xy}
  G1 Y{bb.brush_start_y}

  SET_VELOCITY_LIMIT ACCEL={original_accel} MINIMUM_CRUISE_RATIO={original_minimum_cruise_ratio}
  
  # Perform wipe. 
  {% for wipes in range(1, (bb.wipe_qty + 1)) %}
     G1 X{bb.brush_start_x + bb.brush_width} F{bb.wipe_spd_xy}
     G1 X{bb.brush_start_x} F{bb.wipe_spd_xy}
  {% endfor %}

  # Move the chimney back to the mid point.
  TURDHERDER_SERVO POS=mid
  
  RESTORE_GCODE_STATE NAME=TURDHERDER_CLEAN_state MOVE=1 MOVE_SPEED=300

##########################################################################################
# Park the nozzle on the tray to prevent oozing during filament swaps. Place this 
# extension in the post_form_tip extension in mmu_macro_vars.cfg:
#   variable_user_post_form_tip_extension: "TURDHERDER_PARK"
#
[gcode_macro TURDHERDER_PARK]
variable_restore_z: 0
gcode:
  {% set bl = printer['gcode_macro TURDHERDER'] %}
  {% set pos = printer.gcode_move.gcode_position %}
  {% set safe = printer['gcode_macro _TURDHERDER_SAFE_DESCEND'] %}
  {% set pos_max = printer.toolhead.axis_maximum %}
  {% set position_y = pos_max.y - bl.skew_correction %}
  SET_GCODE_VARIABLE MACRO=TURDHERDER_PARK VARIABLE=restore_z VALUE={pos.z}

    {% if "xyz" in printer.toolhead.homed_axes %}
      G90  
      # Check if Z is greater than the bottom of the base and move up if not
      {% if pos.z < bl.thbottom %}
        G1 Z{bl.thbottom} F{bl.travel_spd_z}
      {% endif %}
    TURDHERDER_SERVO POS=out
    G1 X{bl.brush_start_x + bl.brush_width + 5} Y{bl.brush_start_y} F{bl.travel_spd_xy}

    {% else %}
    RESPOND MSG="Please home before parking"
    {% endif %}

##############################################
# Retract or extend the tray                 #
# POS=[in|mid|out] Retractor extend the tray #
##############################################
[gcode_macro TURDHERDER_SERVO]
# Increase this value if the servo doesn't have enough time to fully retract or extend
variable_dwell_time: 400
gcode:
  {% set bl = printer['gcode_macro TURDHERDER'] %}
  {% set pos = printer.gcode_move.gcode_position %}
  {% set spos = params.POS|default("mid") %}

  {% if pos.z < bl.thbottom %}
    G1 Z{bl.thbottom} F{bl.travel_spd_z}
  {% endif %}
  
  {% if spos == "in" %}
    SET_SERVO SERVO=TURDHERDER ANGLE={bl.tray_angle_in}
    G4 P{dwell_time}
  {% elif spos == "out" %}
    SET_SERVO SERVO=TURDHERDER ANGLE={bl.tray_angle_out}
    G4 P{dwell_time}
  {% elif spos == "mid" %}
    SET_SERVO SERVO=TURDHERDER ANGLE={bl.tray_angle_mid}
    G4 P{dwell_time}
  {% else %}
    {action_respond_info("TURDHERDER: provide POS=[in|mid|out]")}
  {% endif %}

[gcode_macro SERVO_IN]
gcode:
 TURDHERDER_SERVO POS=in

[gcode_macro SERVO_MID]
gcode:
 TURDHERDER_SERVO POS=mid

[gcode_macro SERVO_OUT]
gcode:
 TURDHERDER_SERVO POS=out
  
##########################################################################################
# Define exclude objects for those who haven't already
#
[exclude_object]

##########################################################################################
# Overwrite the existing EXCLUDE_OBJECT_DEFINE to also check for safe descend.
#
[gcode_macro EXCLUDE_OBJECT_DEFINE]
rename_existing: _EXCLUDE_OBJECT_DEFINE
gcode:
  # only reset on the first object at the beginning of a print
  {% if printer.exclude_object.objects|length < 1 %}
    _TURDHERDER_RESET_SAFE_DESCEND
  {% endif %}
  _EXCLUDE_OBJECT_DEFINE {rawparams}
  _TURDHERDER_SAFE_DESCEND
  UPDATE_DELAYED_GCODE ID=TURDHERDER_SHOW_SAFE_DESCEND DURATION=1
  
[delayed_gcode TURDHERDER_SHOW_SAFE_DESCEND]
gcode:
  {% set safe = printer['gcode_macro _TURDHERDER_SAFE_DESCEND'] %}
  {action_respond_info(
    "TURDHERDER: Safe descend possible:\n - tray:  %s\n - brush: %s\n - shake: %s" % 
    (
      "yes" if safe.tray else "no",
      "yes" if safe.brush else "no",
      "yes" if safe.shake else "no"
    )
  )}

##########################################################################################
# Use the EXCLUDE_OBJECT_START gcode macro to record the current height
#
[gcode_macro EXCLUDE_OBJECT_START]
rename_existing: _EXCLUDE_OBJECT_START
gcode:
  _EXCLUDE_OBJECT_START {rawparams}
  {% if printer['gcode_macro _TURDHERDER_SAFE_DESCEND'].first_layer %}
    SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=first_layer VALUE=False
    SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=print_height VALUE={printer['gcode_macro _TURDHERDER_SAFE_DESCEND'].print_layer_height}
  {% else %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set last_height = printer['gcode_macro _TURDHERDER_SAFE_DESCEND'].print_previous_height|float %}
    {% if pos.z > last_height %}
      {% set last_layer = (pos.z - last_height)|round(2) %}
      {% set print_height = (pos.z + last_layer)|round(2) %}
      SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=print_previous_height VALUE={pos.z}
      SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=print_height VALUE={print_height}
    {% endif %}
  {% endif %}


##########################################################################################
# Reset the safe descend variables.
#
[gcode_macro _TURDHERDER_RESET_SAFE_DESCEND]
gcode:
  SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=tray VALUE=True
  SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=brush VALUE=True
  SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=shake VALUE=True
  SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=first_layer VALUE=True
  SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=print_height VALUE=0
  SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=print_previous_height VALUE=0

##########################################################################################
# Determine if it is safe to drop the toolhead (e.g. not hit a print)
#
[gcode_macro _TURDHERDER_SAFE_DESCEND]
variable_tray: True # Assume it is safe
variable_brush: True
variable_shake: True
variable_first_layer: True
variable_print_height: 0
variable_print_previous_height: 0
variable_print_layer_height: 0.3
gcode:
  {% set bl = printer['gcode_macro TURDHERDER'] %}
  {% set pos_max = printer.toolhead.axis_maximum %}
  {% set position_y = pos_max.y - bl.skew_correction %}
  {% set tray = [bl.purge_x + bl.toolhead_x, position_y - bl.toolhead_y] %}
  {% set brush = [bl.brush_start_x + bl.brush_width + bl.toolhead_x, position_y - bl.toolhead_y] %}
  {% set shake = [bl.purge_x + bl.toolhead_x, position_y - bl.toolhead_y - 4] %}
  {% set objects = printer.exclude_object.objects | map(attribute='polygon') %}

  {% for polygon in objects %}
    {% for point in polygon %}
      {% if point[0] < tray[0] and point[1] > tray[1] %}
        SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=tray VALUE=False
      {% endif %}
      {% if point[0] < brush[0] and point[1] > brush[1] %}
        SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=brush VALUE=False
      {% endif %}
      {% if point[0] < shake[0] and point[1] > shake[1] %}
        SET_GCODE_VARIABLE MACRO=_TURDHERDER_SAFE_DESCEND VARIABLE=shake VALUE=False
      {% endif %}
    {% endfor %}
  {% endfor %}

##########################################################################################
# Some sanity checks
#
[delayed_gcode TURDHERDER_INIT]
initial_duration: 5.0
gcode:
  _TURDHERDER_INIT

[gcode_macro _TURDHERDER_INIT]
gcode:
  {% set bl = printer['gcode_macro TURDHERDER'] %}

  # Valid part cooling fan setting
  {% if bl.part_cooling_fan != -1 and (bl.part_cooling_fan < 0 or bl.part_cooling_fan > 1) %}
    {action_emergency_stop("TURDHERDER: Value %f is invalid for variable part_cooling_fan. Either -1 or a value from 0 .. 1 is valid." % (bl.part_cooling_fan))}
  {% endif %}

  # Check if position is on 'next'
  {% if printer.mmu %}
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].restore_xy_pos != 'next' %}
      {action_respond_info("TURDHERDER: If not using a wipe tower, consider setting restore_xy_pos: 'next' in mmu_macro_vars.cfg")}
    {% endif %}
  {% endif %}

  # Check the z_raise variable for normal values
  {% if bl.z_raise < 3 %}
    {action_respond_info("TURDHERDER: variable_z_raise: %f is very low. This is the value z raises in total on a single blob. Make sure the value is correct before continuing." % (bl.z_raise))}
  {% endif %}

  # Z raise exponent
  {% if bl.z_raise_exp > 1 or bl.z_raise_exp < 0.5 %}
    {action_respond_info("TURDHERDER: variable_z_raise_exp has value: %f. This value is out of spec (0.5 ... 1.0)." % (bl.z_raise))}
  {% endif %}

[respond]

#[save_variables]
#filename: ~/printer_data/config/TurdHerder/turd_vars.cfg
